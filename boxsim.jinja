<!DOCTYPE html>
<html lang="en">
  <head>
    {% include 'header.jinja' %}
    <title>Wyvern DB</title>
  </head>
  <body>
    {% include 'navbar.jinja' %}
    <form class="text-center p-4" id="boxSimForm">
      <h1>Box Opening Simulator</h1>
      <div class="container justify-content-center">
        <table class="table align-middle border">
          <thead>
            <tr>
              <th scope="col" class="col-6">Sealed Product</th>
              <th scope="col" class="col-3"># Packs</th>
              <th scope="col" class="col-3"># Boxes</th>
            </tr>
          </thead>
          <tbody>
            {% for pack in packs %}
            <tr>
              <td scope="row">
                <div>
                  <u>
                    {{ sets[pack[0]]["name"] }}
                    {{ sets[pack[0]]["packs"][pack[1]]["name"] }}
                  </u>
                </div>
                <div>
                  <em>
                    {{ len(sets[pack[0]]["packs"][pack[1]]["contents"]) }} cards
                    per pack,
                    {{ sets[pack[0]]["packs"][pack[1]]["per_box"] }} packs per
                    box
                  </em>
                </div>
              </td>
              <td>
                <input
                  class="form-control"
                  type="number"
                  value="0"
                  id="{{ pack[0] }}-{{ pack[1] }}-packs"
                />
              </td>
              <td>
                <input
                  class="form-control"
                  type="number"
                  value="0"
                  id="{{ pack[0] }}-{{ pack[1] }}-boxes"
                />
              </td>
            </tr>
            {% endfor %}
          </tbody>
        </table>
      </div>
      <div>
        <button type="submit" class="btn btn-primary w-50">Open Boxes!</button>
      </div>
    </form>
    <div id="boxSimResults" class="text-center p-4" hidden>
      <h1>Results</h1>
      <table
        class="table table-hover align-middle border"
        id="boxSimResultsTable"
      >
        <thead>
          <tr>
            <th
              scope="col"
              class="col-1"
              onclick="sortTable(0, sortTableKeyNumber)"
              style="cursor: pointer"
            >
              #
            </th>
            <th
              scope="col"
              class="col-5"
              onclick="sortTable(1, sortTableKeyText)"
              style="cursor: pointer"
            >
              Name
            </th>
            <th
              scope="col"
              class="col-3"
              onclick="sortTable(2, sortTableKeyText)"
              style="cursor: pointer"
            >
              Set
            </th>
            <th
              scope="col"
              class="col-3"
              onclick="sortTable(3, sortTableKeyRarity)"
              style="cursor: pointer"
            >
              Rarity
            </th>
          </tr>
        </thead>
        <tbody id="boxSimResultsBody"></tbody>
      </table>
      <div class="container">
        <div class="row">
          <div class="col">
            <button class="btn btn-secondary" onclick="exportToClipboard()">
              Export to Clipboard
            </button>
          </div>
          <div class="col">
            <button class="btn btn-secondary" onclick="exportToFile()">
              Export to File
            </button>
          </div>
        </div>
      </div>
    </div>
    <script>
      var cards = {{ repr(cards) }};
      var sets = {{ repr(sets) }};
      var packs = {{ repr(packs) }};

      function pickUnweighted(choices) {
        return choices[Math.floor(Math.random() * choices.length)];
      }

      function pickWeighted(weights) {
        var totalWeights = Object.keys(weights)
          .map((n) => Number.parseInt(n))
          .reduce((a, b) => a + b, 0);
        var randomPick = Math.floor(Math.random() * totalWeights);
        var entries = Object.entries(weights).map((kv) => [
          Number.parseInt(kv[0]),
          kv[1],
        ]);
        for (var i = 0; i < entries.length; i++) {
          randomPick -= entries[i][0];
          if (randomPick < 0) {
            return entries[i][1];
          }
        }
      }

      var cardsPulled;
      document.getElementById("boxSimForm").addEventListener("submit", (e) => {
        e.preventDefault();
        var body = document.getElementById("boxSimResultsBody");
        body.innerHTML = "";
        document.getElementById("boxSimResults").removeAttribute("hidden");
        cardsPulled = {};

        function addCard(id) {
          if (!(id in cardsPulled)) {
            cardsPulled[id] = 1;
          } else {
            cardsPulled[id]++;
          }
        }

        packs.forEach((pack) => {
          var set = sets[pack[0]];
          var packInfo = set["packs"][pack[1]];

          function rollForCard(cardPool) {
            if ("pack_pools" in set && cardPool in set["pack_pools"]) {
              // a single card from a card pool
              addCard(pickUnweighted(set["pack_pools"][cardPool]));
            } else {
              // a single card of a given rarity
              addCard(
                pickUnweighted(
                  set["cards"].filter((id) => cards[id]["rarity"] === cardPool)
                )
              );
            }
          }

          var nPacks =
            Number.parseInt(
              document.getElementById(pack[0] + "-" + pack[1] + "-packs").value
            ) +
            Number.parseInt(
              document.getElementById(pack[0] + "-" + pack[1] + "-boxes").value
            ) *
              packInfo["per_box"];
          for (var i = 0; i < nPacks; i++) {
            packInfo["contents"].forEach((cardPool) => {
              if (typeof cardPool === "string") {
                // a single card
                rollForCard(cardPool);
              } else {
                // object representing a weighted random chance
                var cardsPicked = pickWeighted(cardPool);
                if (typeof cardsPicked === "string") {
                  cardsPicked = [cardsPicked];
                }
                cardsPicked.forEach((cardPool) => {
                  rollForCard(cardPool);
                });
              }
            });
          }
        });

        Object.keys(cardsPulled).forEach((pulled) => {
          var tr = document.createElement("tr");

          var tdNumber = document.createElement("td");
          tdNumber.innerText = cardsPulled[pulled];
          tr.appendChild(tdNumber);

          var tdName = document.createElement("td");
          var link = document.createElement("a");
          link.innerText = cards[pulled]["name"];
          link.setAttribute("href", cards[pulled]["id"] + ".html");
          link.setAttribute("data-bs-toggle", "tooltip");
          link.setAttribute(
            "data-bs-title",
            '<img src="data/images/' +
              cards[pulled]["id"] +
              '.jpeg" height="200px">'
          );
          tdName.appendChild(link);
          tr.appendChild(tdName);

          var tdSet = document.createElement("td");
          var link2 = document.createElement("a");
          link2.innerText = sets[cards[pulled]["set"]]["name"];
          link2.setAttribute("href", cards[pulled]["set"] + ".html");
          tdSet.appendChild(link2);
          tr.appendChild(tdSet);

          var tdRarity = document.createElement("td");
          tdRarity.innerText = rarityString(cards[pulled]);
          tr.appendChild(tdRarity);

          body.appendChild(tr);
          new bootstrap.Tooltip(link, { html: true });
        });
      });

      sortTable = sortTableFn("boxSimResultsTable");

      function exportToClipboard() {
        exportTextToClipboard(exportDecklist(cardsPulled));
      }

      function exportToFile() {
        exportTextToFile(exportDecklist(cardsPulled), "wyvern-boxsim-" + Date.now() + ".txt");
      }
    </script>
  </body>
</html>
